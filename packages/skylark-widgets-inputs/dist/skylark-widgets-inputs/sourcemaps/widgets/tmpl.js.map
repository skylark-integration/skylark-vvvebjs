{"version":3,"sources":["widgets/tmpl.js"],"names":["define","cache","tmpl","str","data","fn","test","document","getElementById","innerHTML","Function","replace","split","join"],"mappings":";;;;;;;AAAAA,UACE,WAIA,IAAIC,KA+BJ,OA7BA,SAASC,EAAKC,EAAKC,GAGpB,IAAIC,EAAK,kBAAkBC,KAAKH,GAC3BF,EAAME,GAAOF,EAAME,IACjBD,EAAKK,SAASC,eAAeL,GAAKM,WAIpC,IAAIC,SAAS,MACX,2EAMAP,EACGQ,QAAQ,YAAa,KACrBC,MAAM,MAAMC,KAAK,MACjBF,QAAQ,mBAAoB,QAC5BA,QAAQ,cAAe,UACvBC,MAAM,MAAMC,KAAK,OACjBD,MAAM,MAAMC,KAAK,YACjBD,MAAM,MAAMC,KAAK,OACpB,0BAEJ,OAAOT,EAAOC,EAAID,GAASC","file":"../../widgets/tmpl.js","sourcesContent":["define([\r\n],function(){\r\n\t\r\n// Simple JavaScript Templating\r\n// John Resig - https://johnresig.com/ - MIT Licensed\r\n  var cache = {};\r\n  \r\n  function tmpl(str, data){\r\n    // Figure out if we're getting a template, or if we need to\r\n    // load the template - and be sure to cache the result.\r\n\tvar fn = /^[-a-zA-Z0-9]+$/.test(str) ?\r\n      cache[str] = cache[str] ||\r\n        tmpl(document.getElementById(str).innerHTML) :\r\n              \r\n      // Generate a reusable function that will serve as a template\r\n      // generator (and which will be cached).\r\n      new Function(\"obj\",\r\n        \"var p=[],print=function(){p.push.apply(p,arguments);};\" +\r\n         \r\n        // Introduce the data as local variables using with(){}\r\n        \"with(obj){p.push('\" +\r\n         \r\n        // Convert the template into pure JavaScript\r\n        str\r\n          .replace(/[\\r\\t\\n]/g, \" \")\r\n          .split(\"{%\").join(\"\\t\")\r\n          .replace(/((^|%})[^\\t]*)'/g, \"$1\\r\")\r\n          .replace(/\\t=(.*?)%}/g, \"',$1,'\")\r\n          .split(\"\\t\").join(\"');\")\r\n          .split(\"%}\").join(\"p.push('\")\r\n          .split(\"\\r\").join(\"\\\\'\")\r\n      + \"');}return p.join('');\");\r\n    // Provide some basic currying to the user\r\n    return data ? fn( data ) : fn;\r\n  };\r\n\r\n  return tmpl;\r\n\r\n});"]}